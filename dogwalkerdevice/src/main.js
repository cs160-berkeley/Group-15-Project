export let orangeSkin = new Skin({fill: "#ff7e3e"});export let yellowSkin = new Skin({fill: "#ffd359"});export let whiteSkin = new Skin({fill: "white"});import Pins from "pins";let companionURL;let textStyle = new Style({ font: "bold 50px", color: "white" });let MainContainer = Container.template($ => ({    name: "main", top: 0, bottom: 0, left: 0, right: 0,    skin: new Skin({ fill: $.backgroundColor }),    contents: [        new Column({            name: "col", top: 0, bottom: 0, left: 0, right: 0,            skin: orangeSkin,            contents:[                Label($, {                    name: "analog1", left: 0, right: 0,                    style: textStyle,  string: $.string + "1:"                }),                Label($, {                    name: "analog2", left: 0, right: 0,                    style: textStyle,  string: $.string + "2:"                }),                Label($, {                    name: "analog3", left: 0, right: 0,                    style: textStyle,  string: $.string + "3:"                }),                Label($, {                    name: "analog4", left: 0, right: 0,                    style: textStyle,  string: $.string + "4:"                })            ]        })    ],}));Handler.bind("/discover", Behavior({    onInvoke: function(handler, message){        trace("Device found the companion.\n");        companionURL = JSON.parse(message.requestText).url;        handler.invoke(new Message(companionURL + "respond"), Message.TEXT);        },    onComplete: function(handler, message, text){        trace("Response was: " + text + "\n");    }}));Handler.bind("/respond", Behavior({    onInvoke: function(handler, message){        message.responseText = "Companion, you found me!";        message.status = 200;        }}));class AppBehavior extends Behavior {    onLaunch(application) {        application.shared = true;        application.discover("dog-prototype.companion.app");        Pins.configure({            analog1: {                require: "Analog", // use built-in digital BLL                pins: {                    analog: {pin: 54, direction: "input"},                    power: {pin: 55, voltage: 3.3, type: "Power"},                    ground: {pin: 56, type: "Ground"},                }            },            analog2: {                require: "Analog",                pins:{                    analog: {pin: 51, direction: "input"},                    power: {pin: 52, voltage: 3.3, type: "Power"},                    ground: {pin: 53, type: "Ground"},                }            },            analog3: {                require: "Analog",                pins:{                    analog: {pin: 57, direction: "output"},                    power: {pin: 58, voltage: 3.3, type: "Power"},                    ground: {pin: 59, type: "Ground"},                }            },            analog4: {                require: "Analog",                pins:{                    analog: {pin: 60, direction: "output"},                    power: {pin: 61, voltage: 3.3, type: "Power"},                    ground: {pin: 62, type: "Ground"},                }            }         },  success => {            if (success) {                Pins.share("ws", {zeroconf: true, name: "pins-share-led"});                application.add(new MainContainer({ string: "Analog ", backgroundColor: orangeSkin }));                Pins.repeat("/analog1/read", 10, function(result){                    application.main.col.analog1.string = "Analog 1: " + String(Math.round(result*100));                });                Pins.repeat("/analog2/read", 10, function(result){                    application.main.col.analog2.string = "Analog 2: " + String(Math.round(result*100));                });                Pins.repeat("/analog3/read", 10, function(result){                    application.main.col.analog3.string = "Analog 3: " + String(Math.round(result*100));                });                Pins.repeat("/analog4/read", 10, function(result){                    application.main.col.analog4.string = "Analog 4: " + String(Math.round(result*100));                });            } else {                   application.add(new MainContainer({ string: "Error", backgroundColor: "red" }));               };        });    }    onQuit(application){        application.shared = false;        application.forget("dog-prototype.companion.app");    }}application.behavior = new AppBehavior();